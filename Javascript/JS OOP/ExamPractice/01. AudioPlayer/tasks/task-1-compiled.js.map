{"version":3,"sources":["task-1.js"],"names":[],"mappings":"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","file":"task-1-compiled.js","sourcesContent":["'use strict';\r\nfunction solve(){\r\n    const getId = (function() {\r\n        let id = 0;\r\n\r\n        return function() {\r\n            id += 1;\r\n            return id;\r\n        };\r\n    }());\r\n\r\n    function validateString(value)  {\r\n        let len = value.length;\r\n\r\n        if(typeof value !== 'string') {\r\n            throw new Error('Not a valid string.');\r\n        }\r\n\r\n        if(len < 3 || len > 25) {\r\n            throw new Error('String not in range. Must be between 3 and 25.');\r\n        }\r\n    }\r\n\r\n    class Player{\r\n        constructor(name) {\r\n            this.id = getId();\r\n            this.name = name;\r\n            this._playLists = [];\r\n\r\n            return this;\r\n        }\r\n\r\n        get name() {\r\n            return this._name;\r\n        }\r\n\r\n        set name(value) {\r\n            validateString(value);\r\n            this._name = value;\r\n        }\r\n\r\n        addPlaylist(playlistToAdd) {\r\n            if(!playlistToAdd instanceof PlayList) {\r\n                throw new Error('Bot a valid type.');\r\n            }\r\n\r\n            this._playLists.push(playlistToAdd);\r\n\r\n            return this;\r\n        }\r\n\r\n        getPlaylistById(id) {\r\n            if(typeof id === 'number') {\r\n                for(let item of this._playLists) {\r\n                    if(item.id === id) {\r\n                        return item;\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            throw new Error('Invalid input');\r\n        }\r\n\r\n        removePlaylist(playList) {\r\n            let id = playList.id || playList;\r\n            let isRemoved = false;\r\n\r\n            this._playLists = this._playLists.filter((item) => {\r\n                const isMatch = item.id === id;\r\n                if (isMatch) {\r\n                    isRemoved = true;\r\n                }\r\n\r\n                return !isMatch;\r\n            });\r\n\r\n            if (!isRemoved) {\r\n                throw new Error('Playlist with id not found');\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        listPlaylists(page, size) {\r\n            let list = [],\r\n                i;\r\n\r\n            page = Number(page);\r\n            size = Number(size);\r\n\r\n            if (page < 0) {\r\n                throw new Error('Page cannot be a negative number!');\r\n            }\r\n\r\n            if (size <= 0) {\r\n                throw new Error('Size cannot be zero or a negative number!');\r\n            }\r\n\r\n            if (this._playLists.length < page * size) {\r\n                throw new Error('Multiplication has a value bigger than the playlists length!');\r\n            }\r\n\r\n\r\n            for (i = 0; i < size; i += 1) {\r\n                const nextIndex = (page * size) + i;\r\n                if (this._playLists[nextIndex]) {\r\n                    list.push(this._playLists[nextIndex]);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n\r\n        contains(playable, playlist) {\r\n            let playableFound = playlist.getPlayableById(playable.id) ? true : false;\r\n\r\n            return playableFound;\r\n        }\r\n\r\n        search(pattern) {\r\n            let result = [],\r\n                playlist,\r\n                song;\r\n\r\n            for(playlist of this._playLists) {\r\n                for(song of this._playLists.playables) {\r\n                    if(song._title.includes(pattern.toLowerCase())) {\r\n                        let matchingPlaylistFound = {\r\n                            name: playlist._name,\r\n                            id: playlist.id\r\n                        };\r\n\r\n                        result.push(matchingPlaylistFound);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    class PlayList {\r\n        constructor(name) {\r\n            this.id = getId();\r\n            this.name = name;\r\n            this._playables = [];\r\n        }\r\n\r\n        get name() {\r\n            return this._name;\r\n        }\r\n\r\n        set name(value) {\r\n            validateString(value);\r\n            this._name = value;\r\n        }\r\n\r\n        addPlayable(playable) {\r\n            this._playables.push(playable);\r\n\r\n            return this;\r\n        }\r\n\r\n        getPlayableById(id) {\r\n            if(typeof id === 'number') {\r\n                for(let item of this._playables) {\r\n                    if(item.id === id) {\r\n                        return item;\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            throw new Error('Invalid input');\r\n        }\r\n\r\n        removePlayable(playable) {\r\n            let id = playable.id || playable;\r\n            let isRemoved = false;\r\n\r\n            this._playables = this._playables.filter((item) => {\r\n                const isMatch = item.id === id;\r\n                if (isMatch) {\r\n                    isRemoved = true;\r\n                }\r\n\r\n                return !isMatch;\r\n            });\r\n\r\n            if (!isRemoved) {\r\n                throw new Error('Playlist with id not found');\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        listPlayables(page, size) {\r\n            let list = [],\r\n                i;\r\n\r\n            page = Number(page);\r\n            size = Number(size);\r\n\r\n            if (page < 0) {\r\n                throw new Error('Page cannot be a negative number!');\r\n            }\r\n\r\n            if (size <= 0) {\r\n                throw new Error('Size cannot be zero or a negative number!');\r\n            }\r\n\r\n            if (this._playables.length < page * size) {\r\n                throw new Error('Multiplication has a value bigger than the playlists length!');\r\n            }\r\n\r\n\r\n            for (i = 0; i < size; i += 1) {\r\n                const nextIndex = (page * size) + i;\r\n                if (this._playables[nextIndex]) {\r\n                    list.push(this._playables[nextIndex]);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return list;\r\n        }\r\n    }\r\n\r\n    class Playable {\r\n        constructor(title, author){\r\n            this.id = getId();\r\n            this.title = title;\r\n            this.author = author;\r\n        }\r\n\r\n        get title() {\r\n            return this._title;\r\n        }\r\n\r\n        set title(value) {\r\n            validateString(value);\r\n            this._title = value;\r\n        }\r\n\r\n        get author() {\r\n            return this._author;\r\n        }\r\n\r\n        set author(value) {\r\n            validateString(value);\r\n            this._author = value;\r\n        }\r\n\r\n        play() {\r\n            const playString = '${this.id}. ${this.title} - ${this.author}';\r\n\r\n            return playString;\r\n        }\r\n    }\r\n\r\n    class Audio extends Playable{\r\n        constructor(title, author, length) {\r\n            super(title, author);\r\n            this.length = length;\r\n        }\r\n\r\n        get length() {\r\n            return this._length;\r\n        }\r\n\r\n        set length(value) {\r\n            if(value.length <= 0) {\r\n                throw new Error('Name must not be empty.');\r\n            }\r\n\r\n            this._length = value;\r\n        }\r\n\r\n        play() {\r\n            const playString = '${super.play()} - ${this.length}';\r\n\r\n            return playString;\r\n        }\r\n    }\r\n\r\n    class Video extends Playable {\r\n        constructor(title, author, imdbRating) {\r\n            super(title, author);\r\n            this.imdbRating = imdbRating;\r\n        }\r\n\r\n        get imdbRating() {\r\n            return this._imdbRating;\r\n        }\r\n\r\n        set imdbRating(value) {\r\n            if(typeof value != 'number'){\r\n                throw new Error('Imdb rating is not a number.');\r\n            }\r\n\r\n            if(value.length < 1 || value.length > 5) {\r\n                throw new Error('Imdb rating must be between 1 and 5.');\r\n            }\r\n\r\n            this._imdbRating = value;\r\n        }\r\n\r\n        play() {\r\n            const playString = '${super.play()} - ${this.imdbRating}';\r\n\r\n            return playString;\r\n        }\r\n    }\r\n\r\n    const module = {\r\n        getPlayer: function (name) {\r\n            return new Player(name);\r\n        },\r\n        getPlaylist: function (name) {\r\n            return new PlayList(name);\r\n        },\r\n        getAudio: function (title, author, length) {\r\n            return new Audio(title, author, length);\r\n        },\r\n        getVideo: function (title, author, imdbRating) {\r\n            return new Video(title, author, imdbRating);\r\n        }\r\n    };\r\n\r\n    return module;\r\n}\r\n\r\nmodule.exports = solve;"]}