{"version":3,"sources":["task-1.js"],"names":[],"mappings":"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","file":"task-1-compiled.js","sourcesContent":["'use strict';\n\nclass listNode {\n    constructor(value) {\n        this._data = value;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set data(data) {\n        return this._data = data\n    }\n\n    get next() {\n        return this._next;\n    }\n\n    set next(next) {\n        return this._next = next;\n    }\n}\n\nclass LinkedList {\n    constructor() {\n        return this;\n    }\n    get first() {\n        return this._first.data;\n    }\n\n    get last() {\n        return this._last.data;\n    }\n\n    get length() {\n        this._length = this._getNodesCount();\n\n        return this._length;\n    }\n\n    append(...elements) {\n        elements.forEach(function(element){\n            let newNode = this._createNewNode(element);\n\n            if(this.length === 0){\n                this._first = newNode;\n                this._last = newNode;\n            }\n            else {\n                this._last.next = newNode;\n            }\n\n            this._last = newNode;\n        }, this);\n\n        return this;\n    }\n\n    prepend(...elements) {\n        let i;\n\n        for (i = elements.length - 1; i >= 0; i -= 1) {\n            let newNode = this._createNewNode(elements[i]);\n            const temp = this._first;\n\n            this._first = newNode;\n            this._first.next = temp;\n\n            if(this.length === 1) {\n                this._last = this._first;\n            }\n        }\n\n        return this;\n    }\n\n    insert(...elements) {\n        let index = elements.shift(),\n            counter = 0,\n            currentNode = this._first;\n\n        if(index === 0){\n            this.prepend(index);\n        }\n        else{\n            while (counter < index - 1) {\n                currentNode = currentNode.next;\n                counter += 1;\n            }\n\n            elements.forEach(function (element) {\n                let node = new listNode(element);\n\n                node.next = currentNode.next;\n                currentNode.next = node;\n                currentNode = node;\n\n                this._length += 1;\n            }, this);\n        }\n\n        return this;\n    }\n\n    at(index, value) {\n        let currentNode = this._first;\n\n        if (index < 0 || index >= this.length) {\n            throw new Error('Invalid index');\n        }\n\n        for (var i = 0; i < index; i += 1) {\n            currentNode = currentNode.next;\n        }\n\n        if(value !== undefined && value !== \"\"){\n            currentNode.data = value;\n        }\n\n        return currentNode.data;\n\n    }\n\n    removeAt(index) {\n        if (index > -1 && index < this._length){\n\n            let current = this._first,\n                previous,\n                counter = 0;\n\n            if (index === 0){\n                this._first = current.next;\n            }\n            else {\n\n                while(index && counter < index){\n                    previous = current;\n                    current = current.next;\n\n                    counter += 1;\n                }\n\n                previous.next = current.next;\n            }\n\n            if(index == this._length - 1){\n                this._length -= 1;\n            }\n\n            this._length -= 1;\n\n\n            return current.data;\n\n        } else {\n\n            return null;\n        }\n    }\n\n    toArray() {\n        let list = [],\n            node = this._first;\n\n        while (node) {\n            list.push(node.data);\n            node = node.next;\n        }\n\n        return list;\n    }\n\n    toString() {\n        return this.toArray().join(' -> ');\n    }\n\n    *[Symbol.iterator]() {\n        let node = this._first;\n\n        while (node) {\n            yield node.data;\n            node = node.next;\n        }\n    }\n\n\n    _createNewNode(value) {\n        let newNode = new listNode(value);\n\n        return newNode;\n    }\n\n    _getNodesCount(){\n        let nodesCount = 0,\n            node = this._first;\n\n        while (node) {\n            nodesCount += 1;\n            node = node.next;\n        }\n\n        return nodesCount;\n    }\n\n\n}\n\nconst values = [1, 4, 5],\n      list = new LinkedList().append(...values).insert(1, 2, 3);\n\nfor (const val of list) {\n    console.log(val);\n}\n\nmodule.exports = LinkedList;"]}