{"version":3,"sources":["task-1.js"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAAS,KAAT,GAAiB;AAChB,MAAI,SAAS;AACZ,UAAM,UAAS,KAAT,EAAgB,aAAhB,EAA+B;AACpC,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,aAAL,GAAqB,aAArB;AACA,WAAK,QAAL,GAAgB,EAAhB;;AAEA,aAAO,IAAP;AACA,KAPW;AAQZ,gBAAY,UAAS,IAAT,EAAe,CAE1B,CAVW;AAWZ,oBAAgB,YAAW,CAC1B,CAZW;AAaZ,oBAAgB,UAAS,SAAT,EAAoB,UAApB,EAAgC,CAC/C,CAdW;AAeZ,qBAAiB,UAAS,OAAT,EAAkB,CAClC,CAhBW;AAiBZ,oBAAgB,YAAW,CAC1B;AAlBW,GAAb;;AAqBA,SAAO,MAAP;AACA;;AAGD,OAAO,OAAP,GAAiB,KAAjB","file":"task-1-compiled.js","sourcesContent":["/* Task Description */\n/* \n* Create a module for a Telerik Academy course\n  * The course has a title and presentations\n    * Each presentation also has a title\n    * There is a homework for each presentation\n  * There is a set of students listed for the course\n    * Each student has firstname, lastname and an ID\n      * IDs must be unique integer numbers which are at least 1\n  * Each student can submit a homework for each presentation in the course\n  * Create method init\n    * Accepts a string - course title\n    * Accepts an array of strings - presentation titles\n    * Throws if there is an invalid title\n      * Titles do not start or end with spaces\n      * Titles do not have consecutive spaces\n      * Titles have at least one character\n    * Throws if there are no presentations\n  * Create method addStudent which lists a student for the course\n    * Accepts a string in the format 'Firstname Lastname'\n    * Throws if any of the names are not valid\n      * Names start with an upper case letter\n      * All other symbols in the name (if any) are lowercase letters\n    * Generates a unique student ID and returns it\n  * Create method getAllStudents that returns an array of students in the format:\n    * {firstname: 'string', lastname: 'string', id: StudentID}\n  * Create method submitHomework\n    * Accepts studentID and homeworkID\n      * homeworkID 1 is for the first presentation\n      * homeworkID 2 is for the second one\n      * ...\n    * Throws if any of the IDs are invalid\n  * Create method pushExamResults\n    * Accepts an array of items in the format {StudentID: ..., Score: ...}\n      * StudentIDs which are not listed get 0 points\n    * Throw if there is an invalid StudentID\n    * Throw if same StudentID is given more than once ( he tried to cheat (: )\n    * Throw if Score is not a number\n  * Create method getTopStudents which returns an array of the top 10 performing students\n    * Array must be sorted from best to worst\n    * If there are less than 10, return them all\n    * The final score that is used to calculate the top performing students is done as follows:\n      * 75% of the exam result\n      * 25% the submitted homework (count of submitted homeworks / count of all homeworks) for the course\n*/\n\nfunction solve() {\n\tvar Course = {\n\t\tinit: function(title, presentations) {\n\t\t\tthis.title = title;\n\t\t\tthis.presentations = presentations;\n\t\t\tthis.students = [];\n\n\t\t\treturn this;\n\t\t},\n\t\taddStudent: function(name) {\n\t\t\t\n\t\t},\n\t\tgetAllStudents: function() {\n\t\t},\n\t\tsubmitHomework: function(studentID, homeworkID) {\n\t\t},\n\t\tpushExamResults: function(results) {\n\t\t},\n\t\tgetTopStudents: function() {\n\t\t}\n\t};\n\n\treturn Course;\n}\n\n\nmodule.exports = solve;\n"]}