{"version":3,"sources":["task-1-tests-playlist.js"],"names":[],"mappings":"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","file":"task-1-tests-playlist-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.9.3\nvar expect, result;\n\nexpect = require('chai').expect;\nresult = require('../tasks/task-1')();\n\ndescribe('Sample exam tests', function () {\n    describe('PlayList', function () {\n        describe('With valid input', function () {\n            it('expect getPlaylist to exist, to be a function and to take a single parameter and to enable chaining', function () {\n                expect(result.getPlaylist).to.exist;\n                expect(result.getPlaylist).to.be.a('function');\n                expect(result.getPlaylist).to.have.length(1);\n            });\n            it('expect getPlaylist to return a new playlist instance, with provided name and generated id', function () {\n                var name, playlist;\n                name = 'Rock and roll';\n                playlist = result.getPlaylist(name);\n\n                expect(playlist).to.exist;\n                expect(playlist).to.be.an('object');\n                expect(playlist.name).to.equal(name);\n                expect(playlist.id).to.exist;\n                expect(playlist.id > 0).to.equal(true);\n            });\n            it('expect getPlaylist to generate different ids', function () {\n                var name = 'Rock and roll',\n                    playlist1 = result.getPlaylist(name),\n                    playlist2 = result.getPlaylist(name);\n\n                expect(playlist1).to.exist;\n                expect(playlist2).to.exist;\n                expect(playlist1.id).not.to.equal(playlist2.id);\n            });\n\n            it('expect playlist.addPlayable() to exists, to be a function and to take a single parameter and to enable chaining', function () {\n                var name = 'Rock and roll',\n                    playlist = result.getPlaylist(name),\n                    playable = {id: 1, name: 'Banana Rock', author: 'Wombles'};\n\n                expect(playlist.addPlayable).to.exist;\n                expect(playlist.addPlayable).to.be.a('function');\n                expect(playlist.addPlayable).to.have.length(1);\n\n                returnedPlaylist = playlist.addPlayable(playable);\n                return expect(returnedPlaylist).to.equal(playlist);\n            });\n            it('expect playlist.getPlayableById() to exists, to be a function and to take a single parameter', function () {\n                var name, playlist;\n                name = 'Rock and roll';\n                playlist = result.getPlaylist(name);\n\n                expect(playlist.getPlayableById).to.exist;\n                expect(playlist.getPlayableById).to.be.a('function');\n                expect(playlist.getPlayableById).to.have.length(1);\n            });\n            it('expect playlist.addPlayable() to add the playable and playlist.getPlayableById() to retrieve the same playable', function () {\n                var returnedPlayable,\n                    name = 'Rock and roll',\n                    playlist = result.getPlaylist(name),\n                    playable = {id: 1, name: 'Banana Rock', author: 'Wombles'};\n\n                returnedPlayable = playlist.addPlayable(playable).getPlayableById(1);\n                expect(returnedPlayable.id).to.equal(playable.id);\n                expect(returnedPlayable.name).to.equal(playable.name);\n                expect(returnedPlayable.author).to.equal(playable.author);\n            });\n\n            it('expect playlist.removePlayable() to exists, to be a function and to take a single parameter', function () {\n                var name = 'Rock and roll',\n                    playlist = result.getPlaylist(name);\n\n                expect(playlist.removePlayable).to.exist;\n                expect(playlist.removePlayable).to.be.a('function');\n                expect(playlist.removePlayable).to.have.length(1);\n            });\n            it('expect playlist.removePlayable() remove the playable with that id', function () {\n                var gotten,\n                    name = 'Rock and roll',\n                    plName = 'Banana Rock',\n                    plAuthor = 'Wombles',\n                    playlist = result.getPlaylist(name),\n                    playable = {id: 1, name: plName, author: plAuthor};\n\n                playlist.addPlayable(playable);\n                playlist.removePlayable(playable);\n                gotten = playlist.getPlayableById(1);\n                expect(gotten).to.be.null;\n\n                playlist.addPlayable(playable);\n                playlist.removePlayable(1);\n                gotten = playlist.getPlayableById(1);\n\n                expect(gotten).to.be.null;\n                expect(function() { playlist.removePlayable(10); }).to.throw();\n            });\n\n            it('expect playlist.listPlayables() to exists, to be a function and to take 2 parameters', function () {\n                var name, playlist;\n                name = 'Rock and roll';\n                playlist = result.getPlaylist(name);\n\n                expect(playlist.listPlayables).to.exist;\n                expect(playlist.listPlayables).to.be.a('function');\n                expect(playlist.listPlayables).to.have.length(2);\n            });\n            it('expect playlist.listPlayables() to return correct number of playables and to throw errors when invalid data is passed', function () {\n                var i, name, playlist;\n                name = 'Hard Rock';\n                playlist = result.getPlaylist(name);\n\n                for (i = 0; i < 35; i += 1) {\n                    playlist.addPlayable({id: (i + 1), name: 'Rock' + (9 - (i % 10))});\n                }\n\n                expect(playlist.listPlayables(2, 10).length).to.equal(10);\n                expect(playlist.listPlayables(3, 10).length).to.equal(5);\n\n                expect(function() { playlist.listPlayables(-1, 10) }).to.throw();\n                expect(function() { playlist.listPlayables(5, 10) }).to.throw();\n                expect(function() { playlist.listPlayables(1, -1) }).to.throw();\n            });\n        });\n    });\n});\n\n//# sourceMappingURL=task-1-tests.js.map\n"]}