{"version":3,"sources":["task-1-tests.js"],"names":[],"mappings":"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","file":"task-1-tests-compiled.js","sourcesContent":["// Generated by CoffeeScript 1.9.3\nvar expect, result;\n\nexpect = require('chai').expect;\n\nresult = require('../tasks/task-1')();\n\ndescribe('Sample exam tests', function() {\n  return describe('Players', function() {\n    return describe('With valid input', function() {\n      it('expect getPlayer to exist, to be a function and to take a single parameter', function() {\n        expect(result.getPlayer).to.exist;\n        expect(result.getPlayer).to.be.a('function');\n        return expect(result.getPlayer).to.have.length(1);\n      });\n      it('expect getPlayer to return a new player instance, with provided name and generated id', function() {\n        var name, player;\n        name = 'Rock and roll';\n        player = result.getPlayer(name);\n        expect(player).to.exist;\n        expect(player).to.be.an('object');\n        expect(player.name).to.equal(name);\n        return expect(player.id).to.exist;\n      });\n      it('expect player.addPlaylist() to exists, to be a function, to take a single parameter and to enable chaining', function() {\n        var name, player, playlist, returnedPlayer;\n        name = 'Rock and roll';\n        player = result.getPlayer(name);\n        playlist = result.getPlaylist(name);\n        expect(player.addPlaylist).to.exist;\n        expect(player.addPlaylist).to.be.a('function');\n        expect(player.addPlaylist).to.have.length(1);\n        returnedPlayer = player.addPlaylist(playlist);\n        return expect(returnedPlayer).to.equal(player);\n      });\n      it('expect player.getPlaylistById() to return previously added playlist, when no other playlists', function() {\n        var name, player, playlist, returnedPlaylist;\n        name = 'Rock and Roll';\n        player = result.getPlayer(name);\n        playlist = result.getPlaylist(name);\n        returnedPlaylist = player.addPlaylist(playlist).getPlaylistById(playlist.id);\n        return expect(returnedPlaylist).to.equal(playlist);\n      });\n      it('expect player.getPlaylistById() to return previously added playlist, when there are other playlists', function() {\n        var count, i, j, k, name, player, playlist, ref, ref1;\n        name = 'Rock and Roll';\n        player = result.getPlayer(name);\n        playlist = result.getPlaylist(name);\n        count = 5;\n        for (i = j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n          player.addPlaylist(result.getPlaylist(name + i));\n        }\n        player.addPlaylist(playlist);\n        for (i = k = 0, ref1 = count; 0 <= ref1 ? k <= ref1 : k >= ref1; i = 0 <= ref1 ? ++k : --k) {\n          player.addPlaylist(result.getPlaylist(name + i));\n        }\n        return expect(player.getPlaylistById(playlist.id)).to.equal(playlist);\n      });\n      it('expect player.getPlaylistById() with id, not contained in the player to return null, when there are other playlists and when there are no playlists at all', function() {\n        var count, i, ids, invalidID, j, name, player, playlist, ref;\n        name = 'Rock and Roll';\n        player = result.getPlayer(name);\n        expect(player.getPlaylistById(2)).to.be[\"null\"];\n        count = 5;\n        ids = {};\n        for (i = j = 0, ref = count; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n          playlist = result.getPlaylist(name + i);\n          player.addPlaylist(playlist);\n          ids[playlist.id] = true;\n        }\n        invalidID = (Math.random() * 100000000) | 0;\n        while (ids[invalidID]) {\n          invalidID = (Math.random() * 100000000) | 0;\n        }\n        return expect(player.getPlaylistById(invalidID)).to.be[\"null\"];\n      });\n      return it('expect player.removePlaylist() to remove the playlist, when id is provided', function() {\n        var i, j, name, player, playlist, results;\n        name = 'Rock and Roll';\n        player = result.getPlayer(name);\n        playlist = result.getPlaylist(name);\n        player.addPlaylist(playlist).removePlaylist(playlist.id);\n        expect(player.getPlaylistById(playlist.id)).to.be[\"null\"];\n        results = [];\n        for (i = j = 0; j <= 5; i = ++j) {\n          results.push(player.addPlaylist(result.getPlaylist(name + i)));\n        }\n        return results;\n      });\n    });\n  });\n});\n\n//# sourceMappingURL=task-1-tests.js.map\n"]}