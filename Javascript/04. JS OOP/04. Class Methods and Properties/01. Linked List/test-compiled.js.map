{"version":3,"sources":["test.js"],"names":[],"mappings":"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","file":"test-compiled.js","sourcesContent":["'use strict';\r\n\r\nclass listNode {\r\n    constructor(value) {\r\n        this._data = value;\r\n    }\r\n\r\n    get data() {\r\n        return this._data;\r\n    }\r\n\r\n    set data(data) {\r\n        this._data = data;\r\n    }\r\n\r\n    get next() {\r\n        return this._next;\r\n    }\r\n\r\n    set next(next) {\r\n        this._next = next;\r\n    }\r\n}\r\n\r\nclass LinkedList {\r\n    constructor() {\r\n        return this;\r\n    }\r\n\r\n    get first() {\r\n        return this._first.data;\r\n    }\r\n\r\n    get last() {\r\n        return this._last.data;\r\n    }\r\n\r\n    get length() {\r\n        this._length = this._countNodes();\r\n        return this._length;\r\n    }\r\n\r\n    append(...elements) {\r\n        this._addElementsAtIndex(elements, Number.MAX_VALUE);\r\n        return this;\r\n    }\r\n\r\n    insert(...elements) {\r\n        if (elements[0] === 0) {\r\n            this.prepend(...elements.slice(1));\r\n        } else {\r\n            this._addElementsAtIndex(elements.slice(1), elements[0]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    at(index, value) {\r\n        const node = this._getNodeAtIndex(index);\r\n\r\n        if (value || value === 0) {\r\n            node.data = value;\r\n            return this;\r\n        } else {\r\n            return node.data;\r\n        }\r\n    }\r\n\r\n    removeAt(index) {\r\n        const node = this._getNodeAtIndex(index);\r\n\r\n        if (index === 0) {\r\n            this._first = node.next;\r\n        } else {\r\n            const previousNode = this._getNodeAtIndex(index - 1);\r\n            previousNode.next = node.next;\r\n        }\r\n\r\n        return node.data;\r\n    }\r\n\r\n    prepend(...elements) {\r\n        const self = this;\r\n\r\n        let nextNode = this._getNodeAtIndex(0);\r\n        for (let i = elements.length - 1; i >= 0; i -= 1) {\r\n            const newNode = this._createNewElement(elements[i]);\r\n\r\n            if (nextNode) {\r\n                newNode.next = nextNode;\r\n            } else {\r\n                this._assignFirstAndLast(newNode);\r\n            }\r\n\r\n            nextNode = newNode;\r\n            this._first = newNode;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    toArray() {\r\n        const listAsArray = [];\r\n        let node = this._first;\r\n        while (node) {\r\n            listAsArray.push(node.data);\r\n            node = node.next;\r\n        }\r\n\r\n        return listAsArray;\r\n    }\r\n\r\n    toString() {\r\n        let result = this.toArray().join(' -> ');\r\n        return result;\r\n    }\r\n\r\n    *[Symbol.iterator]() {\r\n        let node = this._first;\r\n\r\n        while (node) {\r\n            yield node.data;\r\n            node = node.next;\r\n        }\r\n    }\r\n\r\n    _addElementsAtIndex(elements, index) {\r\n        let previousNode;\r\n        if (index === this.length - 1) {\r\n            previousNode = this._last;\r\n        } else {\r\n            previousNode = this._getNodeAtIndex(index - 1);\r\n        }\r\n\r\n        for (let i = 0; i < elements.length; i += 1) {\r\n            const newNode = this._createNewElement(elements[i]);\r\n\r\n            if (previousNode) {\r\n                newNode.next = previousNode.next;\r\n                previousNode.next = newNode;\r\n            } else {\r\n                this._assignFirstAndLast(newNode);\r\n            }\r\n\r\n            previousNode = newNode;\r\n        }\r\n\r\n        this._updateLastNode();\r\n    }\r\n\r\n    _getNodeAtIndex(index) {\r\n        index = index < 0 ? 0 : index;\r\n        index = index > this.length ? this.length - 1 : index;\r\n\r\n        let count = 0;\r\n        let node = this._first;\r\n        while (node && count < index) {\r\n            node = node.next;\r\n            count += 1;\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    _countNodes() {\r\n        let nodesCount = 0;\r\n        let node = this._first;\r\n\r\n        while (node) {\r\n            nodesCount += 1;\r\n            node = node.next;\r\n        }\r\n\r\n        return nodesCount;\r\n    }\r\n\r\n    _updateLastNode() {\r\n        let node = this._first;\r\n        while (node) {\r\n            if (!node.next) {\r\n                this._last = node;\r\n            }\r\n\r\n            node = node.next;\r\n        }\r\n    }\r\n\r\n    _assignFirstAndLast(node) {\r\n        this._first = node;\r\n        this._last = node;\r\n    }\r\n\r\n    _createNewElement(value) {\r\n        const newNode = new listNode(value);\r\n        return newNode;\r\n    }\r\n}\r\n\r\n\r\nconst values = [5, 6, 38],\r\n    list = new LinkedList().append(...values);\r\n\r\nconsole.dir(list);\r\nfor (const val of list) {\r\n    console.log(val);\r\n}"]}